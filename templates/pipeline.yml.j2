---
resources:
- name: bosh-deployment
  type: bosh-deployment
  source:
    ca_cert: ((director_ca_cert))
    target: ((director_address))
    client: ((director_username))
    client_secret: ((director_password))
    deployment: ((deployment))
{% if boshio_release %}
- name: bosh-release-get
  type: bosh-io-release
  source:
    repository: ((bosh_release_repo))
{% else %}
- name: bosh-release-get
  type: git
  source:
    uri: ((bosh_release_repo))
    branch: &bosh_release_branch master
{% endif %}

- name: stemcell
  type: bosh-io-stemcell
  source:
    name: ((stemcell))

- name: bosh-deployment-manifest
  type: git
  source:
    uri: ((deployment_manifest_repo))
    branch: &deployment_manifest_branch master
#    paths: ((deployment_manifest_path))

resource_types:
- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

jobs:
- name: ((deployment))-deploy
  plan:
  - aggregate:
    - get: bosh-release-get
{% if boshio_release and release_tarball %}
      params:
        tarball: true
{% endif %}
    - get: stemcell
    - get: bosh-deployment-manifest
{% if not boshio_release %}
  - task: create-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: &bosh-cli-image-repo hkumar/bosh-cli-v2
      inputs:
      - name: bosh-release-get
      - name: bosh-deployment-manifest
      run:
        path: bosh
        args: [create-release, --final, --tarball=../releases/release.tgz]
        dir: bosh-release-get
      outputs:
      - name: releases
        path: ""
{% endif %}
  - put: bosh-deployment
    params:
      manifest: "bosh-deployment-manifest/((deployment_manifest_path))"
      releases:
      - releases/*.tgz
      stemcells:
      - stemcell/*.tgz
