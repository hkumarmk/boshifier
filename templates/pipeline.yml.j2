---
resources:
{% for target, stages in targets.items() %}
{% for stage_configs in stages['stages'] %}
{% for stage, stage_config in stage_configs.items() %}
- name: bd-{{ target }}-{{ stage }}
  type: bosh-deployment
  source:
    ca_cert: (({{ target }}.{{ stage }}.director_ca_cert))
    target: (({{ target }}.{{ stage }}.director_address))
    client: (({{ target }}.{{ stage }}.director_username))
    client_secret: (({{ target }}.{{ stage }}.director_password))
    deployment: {{ deployment_name }}
{% endfor %}
{% endfor %}
{% endfor %}
{% for release_name, release_config in releases.items() %}
{% if release_config.get('boshio_release') %}

- name: bosh-release-get-{{ release_name }}
  type: bosh-io-release
  source:
    repository: {{ release_config['repo'] }}
{% else %}
- name: bosh-release-get-{{ release_name }}
  type: git
  source:
    uri: {{ release_config['repo'] }}
    branch: {{ release_config.get('branch', 'master') }}

{% endif %}
{% endfor %}

{% for stemcell_name in stemcells %}
- name: stemcell-{{ stemcell_name }}
  type: bosh-io-stemcell
  source:
    name: {{ stemcell_name }}

{% endfor %}
- name: bosh-deployment-manifest
  type: git
  source:
    uri: {{ manifest['repo']  }}
    branch: {{ manifest.get('branch', 'master') }}

resource_types:
- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

jobs:
{% for target, stages in targets.items() %}
{% for stage_configs in stages['stages'] %}
{% set stage_index = stages['stages'].index(stage_configs) %}
{% for stage, stage_config in stage_configs.items() %}
- name: deploy-{{ target }}-{{ stage }}
  serial: true
  plan:
  - do:
    - aggregate:
{% for stemcell_name in stemcells %}
      - get: stemcell-{{ stemcell_name }}
{% endfor %}
      - get: bosh-deployment-manifest
        trigger: true
{% if stage_index > 0 %}
        passed:
{% if tests|length > 0 %}
{% for test in tests %}
        - test-{{ test }}-{{ target }}-{{ stages['stages'][stage_index-1].keys()[0] }}
{% endfor %}
{% else %}
        - deploy-{{ target }}-{{ stages['stages'][stage_index-1].keys()[0] }}
{% endif %}
{% endif %}
{% for release_name, release_config in releases.items() %}
      - get: bosh-release-get-{{ release_name }}
        trigger: true
{% if stage_index > 0 %}
        passed: [deploy-{{ target }}-{{ stages['stages'][stage_index-1].keys()[0] }}]
{% endif %}
{% if release_config.get('params') %}
        params:
{% for param_name, param_value in release_config['params'].items() %}
          {{ param_name }}: {{ param_value }}
{% endfor %}
{% endif %}
{% endfor %}
    - aggregate:
{% for release_name, release_config in releases.items() %}
{% if not release_config.get('boshio_release') %}
      - task: create-release-{{ release_name }}
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: hkumar/bosh-cli-v2
          inputs:
          - name: bosh-release-get-{{ release_name }}
          run:
            path: bosh
            args: [create-release, --final, --tarball=../bosh-release-{{ release_name }}/release.tgz]
            dir: bosh-release-get-{{ release_name }}
          outputs:
          - name: bosh-release-{{ release_name }}
            path: ""
{% endif %}
{% endfor %}
    - put: bd-{{ target }}-{{ stage }}
      params:
        manifest: "bosh-deployment-manifest/{{ manifest.get('path', 'manifest.yml')}}"
        releases:
{% for release_name, release_config in releases.items() %}
{% if release_config.get('boshio_release') %}
        - bosh-release-get-{{ release_name }}/*.tgz
{% else %}
        - bosh-release-{{ release_name }}/*.tgz
{% endif %}
{% endfor %}
        stemcells:
{% for stemcell_name in stemcells %}
        - stemcell-{{ stemcell_name }}/*.tgz
{% endfor %}
{% for test in tests %}
- name: test-{{ test }}-{{ target }}-{{ stage }}
  serial: true
  plan:
    - get: bosh-deployment-manifest
      trigger: true
      passed:
      - deploy-{{ target }}-{{ stage }}
    - task: {{ test }}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hkumar/bosh-cli-v2
        run:
          path: bash
          args:
          - -c
          - |
            set -e
            tmp=$(mktemp)
            echo "(({{ target }}.{{ stage }}.director_ca_cert))" > $tmp
            bosh -e (({{ target }}.{{ stage }}.director_address)) \
              --ca-cert $tmp \
              --client (({{ target }}.{{ stage }}.director_username)) \
              --client-secret (({{ target }}.{{ stage }}.director_password)) \
              -d {{ deployment_name }} run-errand {{ test }}
            rm -f $tmp
{% endfor %}
{% endfor %}
{% endfor %}
{% endfor %}

groups:
{% for target, stages in targets.items() %}
- name: deploy-{{ target }}
  jobs:
{% for stage_configs in stages['stages'] %}
{% for stage, stage_config in stage_configs.items() %}
  - deploy-{{ target }}-{{ stage }}
{% for test in tests %}
  - test-{{ test }}-{{ target }}-{{ stage }}
{% endfor %}
{% endfor %}
{% endfor %}
{% endfor %}
